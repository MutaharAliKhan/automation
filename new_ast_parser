import ast

def sanitize_locators(locator):
    # Sanitize the locator by removing special characters and returning a valid Python variable name
    sanitized = locator.strip('#.[]').replace('-', '_').replace(' ', '_').replace("'", '')
    return sanitized

def transform_script(script):
    # Parse the script into an AST
    tree = ast.parse(script)
    
    # Initialize lists to store locators and fill values
    locators_list = []
    fill_values_list = []

    # Initialize dictionaries to keep track of occurrence counts for locators and values
    locator_count = {}
    fill_value_count = {}
    
    # Function to generate incremented variable names
    def generate_name(base_name, count):
        return base_name + (str(count) if count > 0 else '')

    # Traverse AST nodes and transform fill and get_by_text lines
    for node in ast.walk(tree):
        if isinstance(node, ast.Expr) and isinstance(node.value, ast.Call):
            func = node.value.func
            args = node.value.args

            # Handle page.locator().fill() separately
            if isinstance(func, ast.Attribute) and func.attr == 'fill':
                locator = ast.unparse(func.value)
                fill_value = ast.unparse(args[0])

                # Sanitize locator and store it in the list
                sanitized_locator = sanitize_locators(locator)
                locators_list.append(sanitized_locator)

                # Increment count for locator and fill value
                locator_count[sanitized_locator] = locator_count.get(sanitized_locator, -1) + 1
                fill_value_count[fill_value] = fill_value_count.get(fill_value, -1) + 1
                
                # Generate incremented names
                sanitized_locator_name = generate_name(sanitized_locator, locator_count[sanitized_locator])
                fill_value_name = generate_name(sanitize_locators(fill_value), fill_value_count[fill_value])

                # Replace locator and fill value with incremented variable names
                new_code = f"{func.value}.fill(str({sanitized_locator_name}))"
                new_fill_value_code = f".fill(str({fill_value_name}))"

                # Replace original line with transformed code
                if locator in script:
                    script = script.replace(f"{func.value}.fill({fill_value})", new_code)

                # Add fill values to the list
                fill_values_list.append(fill_value)

            # Handle page.get_by_text() cases
            elif isinstance(func, ast.Attribute) and func.attr in ['click', 'press', 'fill']:
                if isinstance(func.value, ast.Call) and func.value.func.attr == 'get_by_text':
                    text_value = ast.unparse(func.value.args[0])

                    # Sanitize text value and store it in the list
                    sanitized_text_value = sanitize_locators(text_value)
                    locators_list.append(sanitized_text_value)

                    # Increment count for text value
                    text_value_count = locator_count.get(sanitized_text_value, -1) + 1
                    locator_count[sanitized_text_value] = text_value_count

                    # Generate incremented name for the text value
                    sanitized_text_value_name = generate_name(sanitized_text_value, text_value_count)

                    # Replace get_by_text value with the incremented variable name
                    new_code = f"page.get_by_text(str({sanitized_text_value_name}))"

                    if func.attr == 'fill':
                        fill_value = ast.unparse(args[0])

                        # Handle cases where fill is combined with get_by_text
                        sanitized_fill_value = sanitize_locators(fill_value)
                        fill_value_count[sanitized_fill_value] = fill_value_count.get(sanitized_fill_value, -1) + 1
                        sanitized_fill_value_name = generate_name(sanitized_fill_value, fill_value_count[sanitized_fill_value])

                        new_code = f"{new_code}.fill(str({sanitized_fill_value_name}))"
                        fill_values_list.append(fill_value)
                    else:
                        fill_values_list.append(text_value)

                    # Add the click, press or other method call
                    new_code = f"{new_code}.{func.attr}()"

                    # Replace the original line with the transformed code
                    original_line = ast.unparse(node)
                    if original_line in script:
                        script = script.replace(original_line, new_code)
    
    # Return the transformed script and the lists of locators and fill values
    return script, locators_list, fill_values_list


# Example Usage
playwright_script = """
import re
from playwright.sync_api import Playwright, sync_playwright, expect

def run(playwright: Playwright) -> None:
    browser = playwright.chromium.launch(headless=False)
    context = browser.new_context()
    page = context.new_page()

    # comment
    page.goto("https://adactinhotelapp.com/HotelAppBuild2/")
    page.locator("#username").fill("Admin001")
    page.locator("#username").fill("Admin001")
    page.get_by_text('clickme').click()
    page.get_by_text('submit').fill('submit_value').click()

    # comment
    page.get_by_label('data-e2e-firstname').fill('Test2')
    page.get_by_placeholder('data-test-password').fill('Test3')
    page.fill("input[type='submit']", 'Test4')

    # comment
    expect(page.locator("#username")).to_have_value("Admin001")

    # ---------------------
    context.close()
    browser.close()

with sync_playwright() as playwright:
    run(playwright)
"""

transformed_script, locators, fill_values = transform_script(playwright_script)

# Print the transformed script
print("Transformed Script:\n", transformed_script)

# Print the locators list
print("Locators List:\n", locators)

# Print the fill values list
print("Fill Values List:\n", fill_values)