import re

def replace_arguments(file_path, headers):
    try:
        with open(file_path, 'r') as file:
            code = file.read()

        fill_pattern = re.compile(r'\.fill\(([^)]+)\)', re.DOTALL)
        click_pattern = re.compile(r"get_by_text\(([^)]+)\)", re.DOTALL)
        filter_pattern = re.compile(r'filter\(has_text="?([^",)]+)"?\)', re.DOTALL)
        header_index = 0

        def replace_fill(match):
            nonlocal header_index
            args = match.group(1).strip()
            if 'random.randint' in args and not 'str(random.randint' in args:
                return re.sub(r'random\.randint\(([^,]+), ([^)]+)\)', r'str(random.randint(\1, \2))', match.group(0))
            if 'str(' in args:
                return match.group(0)
            if header_index >= len(headers):
                return match.group(0)
            if ',' in args:
                first_arg, second_arg = args.split(',', 1)
                new_second_arg = f'str({headers[header_index]})'
                header_index += 1
                return f'.fill({first_arg.strip()}, {new_second_arg})'
            else:
                new_arg = f'str({headers[header_index]})'
                header_index += 1
                return f'.fill({new_arg})'

        def replace_click(match):
            nonlocal header_index
            args = match.group(1).strip()
            if 'str(' in args:
                return match.group(0)
            if header_index >= len(headers):
                return match.group(0)
            new_arg = f'str({headers[header_index]})'
            header_index += 1
            return f'get_by_text({new_arg})'

        def replace_filter(match):
            nonlocal header_index
            has_text_value = match.group(1).strip()
            if 'str(' in has_text_value:
                return match.group(0)
            if header_index >= len(headers):
                return match.group(0)
            new_has_text_value = f'str({headers[header_index]})'
            header_index += 1
            return f'filter(has_text={new_has_text_value})'

        updated_code = fill_pattern.sub(replace_fill, code)
        updated_code = click_pattern.sub(replace_click, updated_code)
        updated_code = filter_pattern.sub(replace_filter, updated_code)

        with open(file_path, 'w') as file:
            file.write(updated_code)
    except Exception as e:
        print(f"Error processing file {file_path}: {e}")




import re
import logging

def extract_string_literals(code_line):
    pattern = r"'(?:\\'|[^'])*'|\"(?:\\\"|[^\"])*\""
    matches = re.findall(pattern, code_line)
    strings = [re.sub(r"(^'|'$)|(^\"|\"$)", "", match).replace("\\'", "'").replace('\\"', '"') for match in matches]
    return strings

def extract_get_by_text(file):
    text_data = {}
    column_list = []
    column_count = {}
    try:
        with open(file, 'r') as f:
            lines = f.readlines()

        for line_number, line in enumerate(lines, start=1):
            # Extracting get_by_text
            if 'get_by_text' in line:
                get_by_text_part = re.search(r"get_by_text\((.*?)\)", line)
                if get_by_text_part:
                    extracted_text = extract_string_literals(get_by_text_part.group(1))
                    if len(extracted_text) < 1:
                        continue

                    column_name = 'get_by_text'
                    value = sanitize_name(str(extracted_text[0]))

                    if column_name in column_count:
                        column_count[column_name] += 1
                        unique_column_name = f"{column_name}{column_count[column_name]}"
                    else:
                        column_count[column_name] = 1
                        unique_column_name = column_name

                    column_list.append(unique_column_name)
                    text_data[unique_column_name] = value

            # Extracting filter(has_text="value")
            if 'filter' in line and 'has_text=' in line:
                filter_part = re.search(r"filter\(has_text\s*=\s*(.*?)\)", line)
                if filter_part:
                    extracted_text = extract_string_literals(filter_part.group(1))
                    if len(extracted_text) < 1:
                        continue

                    column_name = 'filter_has_text'
                    value = sanitize_name(str(extracted_text[0]))

                    if column_name in column_count:
                        column_count[column_name] += 1
                        unique_column_name = f"{column_name}{column_count[column_name]}"
                    else:
                        column_count[column_name] = 1
                        unique_column_name = column_name

                    column_list.append(unique_column_name)
                    text_data[unique_column_name] = value

    except Exception as e:
        logging.error(f"Error extracting data from {file}: {e}")

    return text_data