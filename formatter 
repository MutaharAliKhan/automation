headers = ["username", "password"]
values = ["testing", "testing123"]

# Creating the dictionary
result = {header: value for header, value in zip(headers, values)}

# Manually formatting the dictionary output
formatted_result = "{\n" + ",\n".join([f"'{k}': '{v}'" for k, v in result.items()]) + "\n}"
print(formatted_result)




def replace_values_in_dict(original_dict, keys_to_replace, variable_name):
    """
    Replace the values of specific keys in the dictionary with a variable name.

    :param original_dict: The original dictionary with key-value pairs.
    :param keys_to_replace: A list of keys whose values should be replaced with the variable name.
    :param variable_name: The name of the variable to replace the values with.
    :return: A formatted string representing the dictionary with the specified replacements.
    """
    # Create the formatted dictionary output
    formatted_result = "{\n" + ",\n".join(
        [f"'{k}': {variable_name}" if k in keys_to_replace else f"'{k}': '{v}'" for k, v in original_dict.items()]
    ) + "\n}"
    
    return formatted_result





original_dict = {
    'username': 'testing',
    'password': 'testing123',
    'email': 'test@example.com',
    'phone': '1234567890',
    'address': '123 Main St',
    'city': 'Testville',
    'state': 'TS',
    'zip': '12345',
    'country': 'Testland',
    'company': 'TestCorp'
}

# Dictionary mapping keys to new variable names
replacement_dict = {
    'username': 'abc',
    'email': 'xyz',
    'phone': 'pqr',
    'zip': 'uvw',
    'country': 'lmn'
}

# Call the method
formatted_dict = replace_values_in_dict_with_multiple_variables(original_dict, replacement_dict)

print(formatted_dict)




def replace_values_in_dict_with_multiple_variables(original_dict, replacement_dict):
    """
    Replace the values of specific keys in the original dictionary with corresponding variable names.

    :param original_dict: The original dictionary with key-value pairs.
    :param replacement_dict: A dictionary where keys are the keys from the original dictionary 
                             to be replaced, and values are the new variable names to use.
    :return: A formatted string representing the dictionary with the specified replacements.
    """
    # Create the formatted dictionary output
    formatted_result = "{\n" + ",\n".join(
        [f"'{k}': {replacement_dict[k]}" if k in replacement_dict else f"'{k}': '{v}'" for k, v in original_dict.items()]
    ) + "\n}"
    
    return formatted_result






def replace_values_in_dict_with_multiple_variables(original_dict, replacement_dict, indent=3):
    """
    Replace the values of specific keys in the original dictionary with corresponding variable names,
    and format the output with a specified indentation.

    :param original_dict: The original dictionary with key-value pairs.
    :param replacement_dict: A dictionary where keys are the keys from the original dictionary 
                             to be replaced, and values are the new variable names to use.
    :param indent: The number of spaces to indent the formatted dictionary.
    :return: A formatted string representing the dictionary with the specified replacements and indentation.
    """
    indent_space = ' ' * indent
    formatted_result = "{\n" + ",\n".join(
        [f"{indent_space}'{k}': {replacement_dict[k]}" if k in replacement_dict else f"{indent_space}'{k}': '{v}'" for k, v in original_dict.items()]
    ) + "\n}"
    
    return formatted_result